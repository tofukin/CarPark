/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package asgn2Simulators;

import asgn2CarParks.CarPark;
import asgn2Exceptions.SimulationException;
import asgn2Exceptions.VehicleException;
import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Kinson
 */
public class GUIRunner extends javax.swing.JFrame {
    
    /**
	 * 
	 */
    private static final long serialVersionUID = 1L;
    private SimulationRunner runner;
    private CarPark carPark;
    private Simulator sim;
    private Log log;
    
    private Integer maxCarSpaces;
    private Integer maxSmallCarSpaces;
    private Integer maxMotorCycleSpaces;
    private Integer maxQueueSize;
    private Integer seed;
    private double carProb;
    private double smallCarProb;
    private double motorCycleProb;
    private double intendedStayMean;
    private double intendedStaySD;
    
    /**
     * Creates new form GUI
     */
    public GUIRunner() {        
        initComponents();
        defaultParam();

        btnShowSummary.setEnabled(false);
    }

    private void defaultParam() {
        maxCarSpaces = Constants.DEFAULT_MAX_CAR_SPACES;
        maxSmallCarSpaces = Constants.DEFAULT_MAX_SMALL_CAR_SPACES;
        maxMotorCycleSpaces = Constants.DEFAULT_MAX_MOTORCYCLE_SPACES;
        maxQueueSize = Constants.DEFAULT_MAX_QUEUE_SIZE;
        
        seed = Constants.DEFAULT_SEED;
        carProb = Constants.DEFAULT_CAR_PROB;
        smallCarProb = Constants.DEFAULT_SMALL_CAR_PROB;
        motorCycleProb = Constants.DEFAULT_MOTORCYCLE_PROB;
        intendedStayMean = Constants.DEFAULT_INTENDED_STAY_MEAN;
        intendedStaySD = Constants.DEFAULT_INTENDED_STAY_SD;
        
        txtMaxCarSpaces.setText(maxCarSpaces.toString());
        txtMaxSmallSpaces.setText(maxSmallCarSpaces.toString());
        txtMaxMCSpaces.setText(maxMotorCycleSpaces.toString());
        txtMaxQueueSize.setText(maxQueueSize.toString());
        txtSeed.setText(seed.toString());
        txtCarProb.setText(String.valueOf(carProb));
        txtSmallCarProb.setText(String.valueOf(smallCarProb));
        txtMCProb.setText(String.valueOf(motorCycleProb));
        txtIntendedStayMean.setText(String.valueOf(intendedStayMean));
        txtIntendedStaySD.setText(String.valueOf(intendedStaySD));
    }
    
    public void setTxtMaxCarSpaces(int value) {
        txtMaxCarSpaces.setText(String.valueOf(value));
    }
    
    public void setTxtMaxSmallSpaces(int value) {
        txtMaxSmallSpaces.setText(String.valueOf(value));
    }
    
    public void setTxtMaxMCSpaces(int value) {
        txtMaxMCSpaces.setText(String.valueOf(value));
    }
    
    public void setTxtMaxQueueSize(int value) {
        txtMaxQueueSize.setText(String.valueOf(value));
    }
    
    public void setTxtSeed(int value) {
        txtSeed.setText(String.valueOf(value));
    }
    
    public void setTxtCarProb(double value) {
        txtCarProb.setText(String.valueOf(value));
    }
    
    public void settxtSmallCarProb(double value) {
        txtSmallCarProb.setText(String.valueOf(value));
    }
    
    public void setTxtMCProb(double value) {
        txtMCProb.setText(String.valueOf(value));
    }
    
    public void setTxtIntendedStayMean(double value) {
        txtIntendedStayMean.setText(String.valueOf(value));
    }
    
    public void setTxtIntendedStaySD(double value) {
        txtIntendedStaySD.setText(String.valueOf(value));
    }
     
    public void logEntry(int time,CarPark cp) throws IOException {
        String status = cp.getStatus(time);
            txtAreaSim.append(status);	
    }

    
    
    public void finalise(CarPark cp) throws IOException {
		txtAreaSim.append("\n End of Simulation\n");
		txtAreaSim.append(cp.finalState());
	}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaSim = new javax.swing.JTextArea();
        panelSize = new javax.swing.JPanel();
        lblmaxCarSpaces = new javax.swing.JLabel();
        lblmaxSmallCarSpaces = new javax.swing.JLabel();
        lblmaxMotorcycleSpaces = new javax.swing.JLabel();
        lblmaxQueueSize = new javax.swing.JLabel();
        txtMaxMCSpaces = new javax.swing.JTextField();
        txtMaxQueueSize = new javax.swing.JTextField();
        txtMaxSmallSpaces = new javax.swing.JTextField();
        txtMaxCarSpaces = new javax.swing.JTextField();
        panelProb = new javax.swing.JPanel();
        lblSeed = new javax.swing.JLabel();
        lblCarProb = new javax.swing.JLabel();
        lblSmallCarProb = new javax.swing.JLabel();
        lblMCProb = new javax.swing.JLabel();
        txtSmallCarProb = new javax.swing.JTextField();
        txtMCProb = new javax.swing.JTextField();
        txtCarProb = new javax.swing.JTextField();
        txtSeed = new javax.swing.JTextField();
        lblIntendedStayMean = new javax.swing.JLabel();
        txtIntendedStayMean = new javax.swing.JTextField();
        lblIntendedStaySD = new javax.swing.JLabel();
        txtIntendedStaySD = new javax.swing.JTextField();
        btnStartSim = new javax.swing.JButton();
        btnDefault = new javax.swing.JButton();
        btnShowSummary = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("INB370 CarPark Simulator");

        txtAreaSim.setColumns(20);
        txtAreaSim.setRows(5);
        jScrollPane1.setViewportView(txtAreaSim);

        panelSize.setBorder(javax.swing.BorderFactory.createTitledBorder("Size Settings"));

        lblmaxCarSpaces.setText("Max Car Spaces");

        lblmaxSmallCarSpaces.setText("Max Small Car Spaces");

        lblmaxMotorcycleSpaces.setText("Max Motorcycle Spaces");

        lblmaxQueueSize.setText("Max Queue Size");

        javax.swing.GroupLayout panelSizeLayout = new javax.swing.GroupLayout(panelSize);
        panelSize.setLayout(panelSizeLayout);
        panelSizeLayout.setHorizontalGroup(
            panelSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSizeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSizeLayout.createSequentialGroup()
                        .addComponent(lblmaxSmallCarSpaces)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtMaxSmallSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelSizeLayout.createSequentialGroup()
                        .addComponent(lblmaxCarSpaces)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtMaxCarSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelSizeLayout.createSequentialGroup()
                        .addGroup(panelSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblmaxMotorcycleSpaces)
                            .addComponent(lblmaxQueueSize))
                        .addGap(18, 18, 18)
                        .addGroup(panelSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMaxQueueSize, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(txtMaxMCSpaces))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelSizeLayout.setVerticalGroup(
            panelSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSizeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblmaxCarSpaces)
                    .addComponent(txtMaxCarSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblmaxSmallCarSpaces)
                    .addComponent(txtMaxSmallSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblmaxMotorcycleSpaces)
                    .addComponent(txtMaxMCSpaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMaxQueueSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblmaxQueueSize))
                .addContainerGap(138, Short.MAX_VALUE))
        );

        panelProb.setBorder(javax.swing.BorderFactory.createTitledBorder("Probabilities Sitting"));

        lblSeed.setText("Seed");

        lblCarProb.setText("Car Probability");

        lblSmallCarProb.setText("Small Car Probability");

        lblMCProb.setText("Motorcycle Probability");

        lblIntendedStayMean.setText("Intended Stay Mean");

        lblIntendedStaySD.setText("Intended Stay SD");

        javax.swing.GroupLayout panelProbLayout = new javax.swing.GroupLayout(panelProb);
        panelProb.setLayout(panelProbLayout);
        panelProbLayout.setHorizontalGroup(
            panelProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProbLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelProbLayout.createSequentialGroup()
                        .addComponent(lblCarProb)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtCarProb, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelProbLayout.createSequentialGroup()
                        .addComponent(lblSeed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSeed, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelProbLayout.createSequentialGroup()
                        .addGroup(panelProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSmallCarProb)
                            .addComponent(lblMCProb)
                            .addComponent(lblIntendedStayMean)
                            .addComponent(lblIntendedStaySD))
                        .addGap(18, 18, 18)
                        .addGroup(panelProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMCProb, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(txtSmallCarProb)
                            .addComponent(txtIntendedStayMean, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(txtIntendedStaySD, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelProbLayout.setVerticalGroup(
            panelProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelProbLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSeed)
                    .addComponent(txtSeed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCarProb)
                    .addComponent(txtCarProb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSmallCarProb)
                    .addComponent(txtSmallCarProb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMCProb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMCProb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIntendedStayMean, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIntendedStayMean))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelProbLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIntendedStaySD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblIntendedStaySD))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnStartSim.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnStartSim.setText("Start");
        btnStartSim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					btnStartSimActionPerformed(evt);
				} catch (SimulationException | IOException | VehicleException e) {
					e.printStackTrace();
				}
            }
        });

        btnDefault.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnDefault.setText("Use Default");
        btnDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefaultActionPerformed(evt);
            }
        });

        btnShowSummary.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnShowSummary.setText("View Summary");
        btnShowSummary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowSummaryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(panelProb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 205, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDefault, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(btnStartSim, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnShowSummary)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelProb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDefault, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(btnStartSim, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                    .addComponent(btnShowSummary, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartSimActionPerformed(java.awt.event.ActionEvent evt) throws SimulationException, IOException, VehicleException {//GEN-FIRST:event_btnStartSimActionPerformed
        Integer maxCar = 0;
        Integer maxSmallCar = 0;
        Integer maxMC = 0;
        Integer maxQueue = 0;
        Integer seed = 0;
        double meanStay = 0;
        double carProb = 0;
        double smallCarProb = 0;
        double mcProb = 0;
        double SD = 0;
        
        try {
            maxCar = Integer.parseInt(txtMaxCarSpaces.getText());
            maxSmallCar = Integer.parseInt(txtMaxSmallSpaces.getText());
            maxMC = Integer.parseInt(txtMaxMCSpaces.getText());
            maxQueue = Integer.parseInt(txtMaxQueueSize.getText());
            
            if (validate(maxCar, maxSmallCar, maxMC, maxQueue)) {
                    newCarPark(maxCar, maxSmallCar, maxMC, maxQueue);
                }
            } catch (NumberFormatException e) {
                txtAreaSim.append("Please enter a valid number of. \n");
                throw new SimulationException("Please enter a valid number. \n");
            }
        
        try {
            seed = Integer.parseInt(txtSeed.getText());
            meanStay = Double.parseDouble(txtIntendedStayMean.getText());
            carProb = Double.parseDouble(txtCarProb.getText());
            smallCarProb = Double.parseDouble(txtSmallCarProb.getText());
            mcProb = Double.parseDouble(txtMCProb.getText());
            SD = Double.parseDouble(txtIntendedStaySD.getText());
            
            newSim(seed, meanStay, SD, carProb, smallCarProb, mcProb);
        } catch (NumberFormatException e) {
                txtAreaSim.append("Please enter a valid number. \n");
                throw new SimulationException("Please enter a valid number. \n");
            }          
        txtAreaSim.setText(null);
        log = new Log();
        runner = new SimulationRunner(carPark, sim, log);
        runner.runGUISimulation(this);
        btnStartSim.setEnabled(false);
        btnDefault.setEnabled(false);
        btnShowSummary.setEnabled(true);
    }//GEN-LAST:event_btnStartSimActionPerformed
    
    public boolean validate (int maxCarSpaces,int maxSmallCarSpaces, 
            int maxMotorCycleSpaces, int maxQueueSize) throws SimulationException {
        
        if (maxCarSpaces < 0 || maxMotorCycleSpaces < 0 || maxQueueSize < 0) {
            txtAreaSim.append("Spaces must be positive value. \n");
            return false;
        } else if (maxSmallCarSpaces <= 0 || maxCarSpaces <= maxSmallCarSpaces) {
            txtAreaSim.append("Car spaces must greater than small car. \n");
            return false;
        } else {
            return true;
        }
    }
    
    public void newCarPark(int maxCarSpaces,int maxSmallCarSpaces,
            int maxMotorCycleSpaces, int maxQueueSize) {
        
        if (maxCarSpaces == this.maxCarSpaces 
                && maxSmallCarSpaces == this.maxSmallCarSpaces 
                && maxMotorCycleSpaces == this.maxMotorCycleSpaces
                && maxQueueSize == this.maxQueueSize) {
            
                carPark = new CarPark();
        } else {
            carPark = new CarPark(maxCarSpaces, maxSmallCarSpaces,
                    maxMotorCycleSpaces, maxQueueSize);
        }        
    }
    
    public void newSim(int seed,double meanStay, double sdStay,
			double carProb, double smallCarProb, double mcProb) throws SimulationException {
        
        if (seed == this.seed && meanStay == intendedStayMean
                && carProb == this.carProb && smallCarProb == this.smallCarProb
                && mcProb == motorCycleProb && sdStay == intendedStaySD) {
            sim = new Simulator();
            } else {
        	sim = new Simulator(seed, meanStay, sdStay,
        			carProb, smallCarProb, mcProb);
            }
    }
    
    private void btnDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefaultActionPerformed
        // TODO add your handling code here:
        defaultParam();
    }//GEN-LAST:event_btnDefaultActionPerformed

    private void btnShowSummaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowSummaryActionPerformed
        // TODO add your handling code here:
        plotSummaryChart(carPark.getCount(), carPark.getNumDissatisfied());
    }//GEN-LAST:event_btnShowSummaryActionPerformed

    
    public void plotSummaryChart(int count, int numDissatisfied) {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.setValue(count, "Vehicles", "Total Vehicle");
        dataset.setValue(numDissatisfied, "Vehicles", "Number Dissatisfied");
        
        JFreeChart chart = ChartFactory.createBarChart("Summary", "", "", dataset, PlotOrientation.HORIZONTAL, false, true, false);
        CategoryPlot catPlot = chart.getCategoryPlot();
        catPlot.setRangeGridlinePaint(Color.BLACK);
        
        ChartFrame frame = new ChartFrame("Summary", chart);
        frame.setSize(1000, 500);
        frame.setVisible(true);
    }
    

        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIRunner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIRunner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIRunner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIRunner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIRunner().setVisible(true);                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDefault;
    public javax.swing.JButton btnShowSummary;
    public javax.swing.JButton btnStartSim;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCarProb;
    private javax.swing.JLabel lblIntendedStayMean;
    private javax.swing.JLabel lblIntendedStaySD;
    private javax.swing.JLabel lblMCProb;
    private javax.swing.JLabel lblSeed;
    private javax.swing.JLabel lblSmallCarProb;
    private javax.swing.JLabel lblmaxCarSpaces;
    private javax.swing.JLabel lblmaxMotorcycleSpaces;
    private javax.swing.JLabel lblmaxQueueSize;
    private javax.swing.JLabel lblmaxSmallCarSpaces;
    private javax.swing.JPanel panelProb;
    private javax.swing.JPanel panelSize;
    private javax.swing.JTextArea txtAreaSim;
    private javax.swing.JTextField txtCarProb;
    private javax.swing.JTextField txtIntendedStayMean;
    private javax.swing.JTextField txtIntendedStaySD;
    private javax.swing.JTextField txtMCProb;
    private javax.swing.JTextField txtMaxCarSpaces;
    private javax.swing.JTextField txtMaxMCSpaces;
    private javax.swing.JTextField txtMaxQueueSize;
    private javax.swing.JTextField txtMaxSmallSpaces;
    private javax.swing.JTextField txtSeed;
    private javax.swing.JTextField txtSmallCarProb;
    // End of variables declaration//GEN-END:variables
}
